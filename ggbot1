import json
import os
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    ContextTypes, filters
)

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = "7890915663:AAG_VLDpMLMNr8YCuhnx61PxQdAPNXxxPg8"
GROUP_CHAT_ID = "@r2wrfq"  # ‚Üê —Ç–µ–ø–µ—Ä—å –∫–∞–∫ username
ADMIN_ID = 6040186314

DB_FILE = "orders.json"
if not os.path.exists(DB_FILE):
    with open(DB_FILE, "w") as f:#
        json.dump({}, f)

def load_orders():
    with open(DB_FILE, "r") as f:
        return json.load(f)

def save_orders(data):
    with open(DB_FILE, "w") as f:
        json.dump(data, f, indent=2)

# === /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç!\n"
        "–≠—Ç–æ *–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç GGPoint*.\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º —Å–≤–æ–∏—Ö –∑–∞–∫–∞–∑–æ–≤.\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "`/status [–Ω–æ–º–µ—Ä_–∑–∞–∫–∞–∑–∞]` ‚Äî —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞—Ç—É—Å.",
        parse_mode="Markdown"
    )

# === /status ===
async def check_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    orders = load_orders()
    if len(context.args) != 1 or not context.args[0].isdigit():
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /status [–Ω–æ–º–µ—Ä_–∑–∞–∫–∞–∑–∞]")
        return

    order_id = context.args[0]
    user_id = update.message.from_user.id

    if order_id in orders:
        orders[order_id]["users"].append(user_id)
        orders[order_id]["users"] = list(set(orders[order_id]["users"]))
        save_orders(orders)
        status = orders[order_id]["status"]
        await update.message.reply_text(f"üì¶ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order_id}: {status}")
    else:
        orders[order_id] = {"status": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "users": [user_id]}
        save_orders(orders)
        await update.message.reply_text(f"üì¶ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order_id}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ ===
async def handle_group_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.username != GROUP_CHAT_ID.lstrip("@"):
        return

    text = update.message.text.strip()
    if not text.startswith("#"):
        return

    parts = text[1:].split(" ", 1)
    if len(parts) != 2 or not parts[0].isdigit():
        return

    order_id, new_status = parts
    orders = load_orders()

    if new_status.lower().strip() == "—Ç–æ–≤–∞—Ä –æ—Ç–¥–∞–Ω":
        if order_id in orders:
            del orders[order_id]
            save_orders(orders)
            await update.message.reply_text(f"üóë –ó–∞–∫–∞–∑ #{order_id} —É–¥–∞–ª—ë–Ω (—Ç–æ–≤–∞—Ä –æ—Ç–¥–∞–Ω)")
        return

    if order_id not in orders:
        orders[order_id] = {"status": "", "users": []}

    orders[order_id]["status"] = new_status
    save_orders(orders)

    for user_id in orders[order_id]["users"]:
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üîî –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}:\n{new_status}"
            )
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    await update.message.reply_text(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order_id} —Å–æ—Ö—Ä–∞–Ω—ë–Ω")

# === –ó–ê–ü–£–°–ö ===
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("status", check_status))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ª—é–±–æ–º —á–∞—Ç–µ, –Ω–æ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ username –≤ –∫–æ–¥–µ
    app.add_handler(MessageHandler(filters.TEXT, handle_group_message))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()
